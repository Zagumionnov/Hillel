"""
    Содержание:
    1. Списки
    2. List comprehension
    3. Кортежи


Колекции бывают встроенные, либо те, которые мы можем подключить сторонними модулями

В списках можно хранить все что угодно.
класс - list (списки) - изменяемый объект

способы создания:
lst = []
lst = list() - больше возм. Позволяет конвертировать любую последовательность в список

        Пример:
        s = 'fff dsdf23 212'
        lst = list(s)
        *Функция сформирует список и каждый элемент строки превратится в элемент списка

Порядок элементов в списке сохраняется, список сохраняет одинаковые объекты,
список включает все символы строки, пробелы тоже

lst = [1, 2, 3, 'tst']

Индексы,срезы тут работают как и в строках
Элементы можно перебирать циклом

Мы можем складывать 2 списка, в результате мы получаем новый список
состоящий из двух строк

    Пример:
    l1 = [1, 2, 3]
    l2 = [4, 5, 6]
    l3 = l1 + l2
    print(l3)

Обращаться к эл. списка можем по индексу, как в строках
Значение индексов списка такое же как в строках

    Пример:
    print(l3[4])

Можем применить срезы
    Пример:
    print(l3[3: 7])

Срезы как и для строк возвращают новый список!

Элементы можно перебирать циклом
    Пример:
    for el in l3:
        print(el, end=' ')

    Пример 2(формируя индексы на ходу):
    for i in range(len(l3)):
        print(l3[i], end=' ')

Копировать списки назначая вторую переменную нельзя, т.к. просто создасться ссылка на тот же объект.
Копировать можно с помощью функции .copy()
Функция copy для ппеременной для копир. списка (одномерных списков, в двухмерных списках работать не будет)
    Пример:

    a = [1, 2, 3, 4]
    b = a
    print(a, id(a)
    print(b, id(b)
    a[2] = 88 - записываем новое значение а по индексу 2
    print(a)
    print(b) - увидим такое же значение 88 по индексу 2, что и в переменной b
    b = a.copy()

ф-я id() - возвращает адрес объекта

Можно применить оператор in (позволяет проверитьвхождения какого-то значения в список)
Вернет True или False

    Пример:
    a = [1, 2, 3, 4, 5, 6, 7]
    print (3 in a) - пров. вхождение в список
    print (3 not in a) - не вхождение

min, max, sum - функции для числовых списков
    Пример:
    print(min(a))
    print(max(a))
    print(sum(a))

Для добавления єлементов в список:
    append(val) - добавляет в конец списка
    insert(idx, val) - добалвяет в опр позицию
    a.append(99)
    print(a)

#в питоне все функии что-то возвращают

Функция индек index

    Пример:
    print(a.index(77)) - позволяет получить индекс элемента в списке

#count(val) - позв. получить количество вхождений (как и в строках)

    Пример:
    print(a.count(2))

функции pop() - получаем последнее значение из списка и удаляем,
pop(idx) - получаем определенно значение из списка и удалить

    Пример:
    print(a.pop())
    print(a.pop(2))


ф-я clear - очищает список
    Пример:
    a.clear()
    print(a)

оператор del el - удаляет єлемент (Если обратиться к списку а не к значению, список будет удален).

    Пример:
    del a[2]
    print(a)

ф-я remove(val) - удаляет конкретное значение, удаляется только первое вхождение

    Пример:
    a.remove(2)
    print(a)

ф-я reverse() переворач список

    Пример:
    a.reverse()
    print(a)

    b = a[::-1] - срез тоже может перевернуть список, но применение среза даст новый список
    print(b)              а ф-я revers - новый список
Использования среза создаст новый список и перевернет, а revers перевернет существующий
b = a[:] - можно применить срез для одномерных списках чтобы содать копию


ф-я sort(key, revers) key - по каким параметрам сортируем.
Если не указывать параметры, сортирует список по возрастания(лексиграфически; по весу чисел)

    Пример:
    a.sort()
    print(a)
    a.sort(revers=True)

Может сортировать список более сложных объектов. key - по каким параметрам и отрибутам сортировать

Как созд. списки:
-вод с клавы
-генераторы случ. чисел
-генераторы списка(из чего, как)


    Создание с помощью генераторов сл. чисел:

    Пример:
    from random import randint
    lst = []
    for _ in range(25):
        lst.append(randint(10,90))
    print(lst)

List comprehension (генераторы списков):
    lst[expression1 expression2 expression3] 1e и 2е выражение обязательно, 3-е не обяз, это выражение
    фильтрации. В качестве 2-е выражения обычно используется цикл. 1-е это некоторое
    выражение которое генерирует новое значение(генератор случ. чисел или арифмет. выраж.)

    Пример:
    lst = [randint(10,90) for _ in range(25)]
    print(lst)

    Пример:
    Хотим на основании имеющегося списка сгенерировать список, состоящи только из четных чисел:
    lst2 = [element for _ in lst if element % 2 == 0]
    print(lst)

    List comprehension - очень удобен когда нам не нужно сохранять значения в переменную,
                         а сразу отдать на обработку


ф-я split разбивает строку

    Пример:
    stroka = "Process finished with exit code 0"
    l1 = stroka.split('s') - если не передавать параметр то будет разбивать по пробелу
    print(l1)

ф-я join склеивает список строк и на выходе получаем целую строку(работает только со списком строк!!!):
    Пример:
    stroka = "Process finished with exit code 0"
    l1 = stroka.split('s')
    print(l1)
    s1 = ' <=> '.join(l1)
    print(s1)

    Пример:
    Хотим создать строку из списка строк и разделить ее "+"
    lst = [12, 234, 235, 112, 31234, 5345, 346] - тут объекты типа int а не str. Нужно преобразовать в str
    s2 = ' + '.join([str(el) for el in lst])
    print(s2)

    Пример:
    Мы хотим сделать большими буквы через 1:
    s3 = ''.join([el.lover() if idx % 2 else element.upper() for idx, el in enumerate(s)])
    print(s3)

    ф-я enumerate - позволяет вернуть элемент последовательности, которой мы дали ей в кач. параметра
    и его индекс, по сути возвращает кортеж. Второй параметр определяет с какого индекса начинаем.



#кортежи tuple (неизменяемые)

Кортежи можно использовать как константы или как параметр функции
Из функции можно вернуть только 1 значение, но с помощью кортежей можно больше

Создание кортежа:
    t = () - будет создаваться кортеж если скобки пустые
    t = (5,) - создаться кортеж (запятая является признаком кортежа, можно даже скобки убрать)
    print(t, type(t))

    s = 'Process finished with exit code 0'
    t = tuple(s)

    t = (1, 12, 124, 234, 123)

Можно хранить любые типы данных
Можно применять операцию сложения, умножение на целое число - результат как в списках
Применять срезы
Можно перебирать циклом for
Можно применять все те же функции что и к спискам, при условии что они не вызывают изменения

a, b, c = 2, 3, 4 - распаковка кортежа








"""
